name: build-pr
on:
  pull_request_target:
    types: [assigned, opened, edited, synchronize, reopened]
    branches:
      - main

jobs:
  check_branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
      reponame: ${{ steps.check_step.outputs.reponame }}
      tag: ${{ steps.check_step.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get branch name, etc.
        id: check_step
        run: |
          raw=${{ github.repository }}
          reponame=${raw##*/}
          echo "reponame=$reponame" >> $GITHUB_OUTPUT
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "branch=$branch" >> $GITHUB_OUTPUT
          tag=""
          if [ ${{ github.ref_type }} = "tag" ]; then
            tag=${{ github.ref_name }}
            echo "Running in $reponame on $branch for $tag"
          else
            echo "Running in $reponame on $branch"
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: check_branch
    env:
      HAVE_LIBRARIES: ${{ secrets.LIBURI != '' }}
      XMLCALABASH_TEST_WEASY: "true"
      CIWORKFLOW: "yes"
      CI_SHA1: ${{ github.sha }}
      CI_BUILD_NUM: ${{ github.run_number }}
      CI_PROJECT_USERNAME: ${{ github.repository_owner }}
      CI_PROJECT_REPONAME: ${{ needs.check_branch.outputs.reponame }}
      CI_BRANCH: ${{ needs.check_branch.outputs.branch }}
      CI_TAG: ${{ needs.check_branch.outputs.tag }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get install -y weasyprint

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup submodules
        run: |
          git submodule init
          git submodule update

      - name: Start the test container
        run: |
          cd tests/3.0-test-suite/docker && docker compose up -d

      - name: Setup private libraries
        if: ${{ env.HAVE_LIBRARIES == 'true' }}
        run: |
            curl -s ${{ secrets.LIBURI }} | openssl enc -aes-256-cbc -salt -pbkdf2 -d -k ${{ secrets.PASSPHRASE }} | tar zxf -

      - name: Build and test XML Calabash
        run: |
          ./gradlew :xmlcalabash:test --tests "com.xmlcalabash.test.UseWhenTest.declOption3"

#          ./gradlew --info test
#          ./gradlew --warning-mode all release
